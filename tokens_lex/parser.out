Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    AS
    BREAK
    COMMA
    DEF
    DEQUALS
    DIC
    DIFFERENT
    DIVIDEINT
    ELIF
    ELSE
    EXPONENT
    FALSE
    FOR
    FROM
    HIGHER
    HIGHEREQ
    IF
    IMPORT
    IN
    IS
    LEN
    LESS
    LESSEQ
    LIST
    LPAREN
    MODULE
    NONE
    NOT
    OR
    PRINT
    RANGE
    RETURN
    RPAREN
    SET
    THEN
    TRUE
    TUPLE
    WHILE

Grammar

Rule 0     S' -> assign
Rule 1     assign -> NAME EQUALS expr
Rule 2     expr -> expr PLUS term
Rule 3     expr -> expr MINUS term
Rule 4     expr -> term
Rule 5     term -> term TIMES factor
Rule 6     term -> term DIVIDE factor
Rule 7     term -> factor
Rule 8     assign -> NAME EQUALS list
Rule 9     list -> LCORCHETE RCORCHETE
Rule 10    list -> LCORCHETE element RCORCHETE
Rule 11    element -> factor
Rule 12    factor -> NUMBER

Terminals, with rules where they appear

AND                  : 
AS                   : 
BREAK                : 
COMMA                : 
DEF                  : 
DEQUALS              : 
DIC                  : 
DIFFERENT            : 
DIVIDE               : 6
DIVIDEINT            : 
ELIF                 : 
ELSE                 : 
EQUALS               : 1 8
EXPONENT             : 
FALSE                : 
FOR                  : 
FROM                 : 
HIGHER               : 
HIGHEREQ             : 
IF                   : 
IMPORT               : 
IN                   : 
IS                   : 
LCORCHETE            : 9 10
LEN                  : 
LESS                 : 
LESSEQ               : 
LIST                 : 
LPAREN               : 
MINUS                : 3
MODULE               : 
NAME                 : 1 8
NONE                 : 
NOT                  : 
NUMBER               : 12
OR                   : 
PLUS                 : 2
PRINT                : 
RANGE                : 
RCORCHETE            : 9 10
RETURN               : 
RPAREN               : 
SET                  : 
THEN                 : 
TIMES                : 5
TRUE                 : 
TUPLE                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assign               : 0
element              : 10
expr                 : 1 2 3
factor               : 5 6 7 11
list                 : 8
term                 : 2 3 4 5 6

Parsing method: LALR

state 0

    (0) S' -> . assign
    (1) assign -> . NAME EQUALS expr
    (8) assign -> . NAME EQUALS list

    NAME            shift and go to state 2

    assign                         shift and go to state 1

state 1

    (0) S' -> assign .



state 2

    (1) assign -> NAME . EQUALS expr
    (8) assign -> NAME . EQUALS list

    EQUALS          shift and go to state 3


state 3

    (1) assign -> NAME EQUALS . expr
    (8) assign -> NAME EQUALS . list
    (2) expr -> . expr PLUS term
    (3) expr -> . expr MINUS term
    (4) expr -> . term
    (9) list -> . LCORCHETE RCORCHETE
    (10) list -> . LCORCHETE element RCORCHETE
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (7) term -> . factor
    (12) factor -> . NUMBER

    LCORCHETE       shift and go to state 7
    NUMBER          shift and go to state 9

    expr                           shift and go to state 4
    list                           shift and go to state 5
    term                           shift and go to state 6
    factor                         shift and go to state 8

state 4

    (1) assign -> NAME EQUALS expr .
    (2) expr -> expr . PLUS term
    (3) expr -> expr . MINUS term

    $end            reduce using rule 1 (assign -> NAME EQUALS expr .)
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11


state 5

    (8) assign -> NAME EQUALS list .

    $end            reduce using rule 8 (assign -> NAME EQUALS list .)


state 6

    (4) expr -> term .
    (5) term -> term . TIMES factor
    (6) term -> term . DIVIDE factor

    PLUS            reduce using rule 4 (expr -> term .)
    MINUS           reduce using rule 4 (expr -> term .)
    $end            reduce using rule 4 (expr -> term .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 7

    (9) list -> LCORCHETE . RCORCHETE
    (10) list -> LCORCHETE . element RCORCHETE
    (11) element -> . factor
    (12) factor -> . NUMBER

    RCORCHETE       shift and go to state 14
    NUMBER          shift and go to state 9

    element                        shift and go to state 15
    factor                         shift and go to state 16

state 8

    (7) term -> factor .

    TIMES           reduce using rule 7 (term -> factor .)
    DIVIDE          reduce using rule 7 (term -> factor .)
    PLUS            reduce using rule 7 (term -> factor .)
    MINUS           reduce using rule 7 (term -> factor .)
    $end            reduce using rule 7 (term -> factor .)


state 9

    (12) factor -> NUMBER .

    TIMES           reduce using rule 12 (factor -> NUMBER .)
    DIVIDE          reduce using rule 12 (factor -> NUMBER .)
    PLUS            reduce using rule 12 (factor -> NUMBER .)
    MINUS           reduce using rule 12 (factor -> NUMBER .)
    $end            reduce using rule 12 (factor -> NUMBER .)
    RCORCHETE       reduce using rule 12 (factor -> NUMBER .)


state 10

    (2) expr -> expr PLUS . term
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (7) term -> . factor
    (12) factor -> . NUMBER

    NUMBER          shift and go to state 9

    term                           shift and go to state 17
    factor                         shift and go to state 8

state 11

    (3) expr -> expr MINUS . term
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (7) term -> . factor
    (12) factor -> . NUMBER

    NUMBER          shift and go to state 9

    term                           shift and go to state 18
    factor                         shift and go to state 8

state 12

    (5) term -> term TIMES . factor
    (12) factor -> . NUMBER

    NUMBER          shift and go to state 9

    factor                         shift and go to state 19

state 13

    (6) term -> term DIVIDE . factor
    (12) factor -> . NUMBER

    NUMBER          shift and go to state 9

    factor                         shift and go to state 20

state 14

    (9) list -> LCORCHETE RCORCHETE .

    $end            reduce using rule 9 (list -> LCORCHETE RCORCHETE .)


state 15

    (10) list -> LCORCHETE element . RCORCHETE

    RCORCHETE       shift and go to state 21


state 16

    (11) element -> factor .

    RCORCHETE       reduce using rule 11 (element -> factor .)


state 17

    (2) expr -> expr PLUS term .
    (5) term -> term . TIMES factor
    (6) term -> term . DIVIDE factor

    PLUS            reduce using rule 2 (expr -> expr PLUS term .)
    MINUS           reduce using rule 2 (expr -> expr PLUS term .)
    $end            reduce using rule 2 (expr -> expr PLUS term .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 18

    (3) expr -> expr MINUS term .
    (5) term -> term . TIMES factor
    (6) term -> term . DIVIDE factor

    PLUS            reduce using rule 3 (expr -> expr MINUS term .)
    MINUS           reduce using rule 3 (expr -> expr MINUS term .)
    $end            reduce using rule 3 (expr -> expr MINUS term .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 19

    (5) term -> term TIMES factor .

    TIMES           reduce using rule 5 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 5 (term -> term TIMES factor .)
    PLUS            reduce using rule 5 (term -> term TIMES factor .)
    MINUS           reduce using rule 5 (term -> term TIMES factor .)
    $end            reduce using rule 5 (term -> term TIMES factor .)


state 20

    (6) term -> term DIVIDE factor .

    TIMES           reduce using rule 6 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 6 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 6 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 6 (term -> term DIVIDE factor .)
    $end            reduce using rule 6 (term -> term DIVIDE factor .)


state 21

    (10) list -> LCORCHETE element RCORCHETE .

    $end            reduce using rule 10 (list -> LCORCHETE element RCORCHETE .)

